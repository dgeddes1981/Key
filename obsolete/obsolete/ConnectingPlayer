/*
**               j###t  ########## ####   ####
**              j###t   ########## ####   ####
**             j###T               "###L J###"
**          ######P'    ##########  #########
**          ######k,    ##########   T######T
**          ####~###L   ####
**          #### q###L  ##########   .#####
**          ####  \###L ##########   #####"
**
**  $Id: ConnectingPlayer,v 1.1.1.1 1999/10/07 19:58:21 pdm Exp $
**
**  Class History
**
**  Date        Name         Description
**  ---------|------------|-----------------------------------------------
**  25Jul97     subtle       added configuration
**
*/
package key;

import java.io.*;
import java.util.Date;

import key.config.*;

/**
  * Is the main instance of a player on the program.  The
  * authenticate() routine has been changed in player to
  * attempt to stop a player being swapped out while they
  * connect, but no guarantee's... we should probably
  * be using tags in here somewhere.
  *
  *  It is the responsibility of this class to send the opening
  *  logo, and retrieve a player from the name entered.  (Authenticating
  *  the player or creating a suitable player as necessary).  No further
  *  action need be taken.
 */
public class ConnectingPlayer extends AnimatedAtom implements LatentlyCached
{
	InteractiveConnection ic;
	Player p = null;
	Player created = null;

	public ConnectingPlayer( InteractiveConnection connection )
	{
		ic = connection;
		setKey( "connect: " + ic.getSiteName() );
	}
	
	public void run()
	{
		try
		{
			Key.getLatencyCache().addToCache( this );
			connect();
		}
		catch( Throwable t )
		{
			if( t instanceof ThreadDeath )
				throw (ThreadDeath) t;
		}
		finally
		{
			Key.getLatencyCache().removeFromCache( this );
			if( p != null )
				p.endConnect();
			if( created != null )
				created.endConnect();
		}
	}
	
	/**
	  *  If a players name is not matched to a character on
	  *  the program, this routine leads them through the
	  *  operations in creating a character of their own.
	  *
	  * @return null if an error or cancellation occurs
	 */
	protected Player connectGuest( InteractiveConnection ic, String name )
	{
		Container online = Key.instance().getOnline();
		Container shortcuts = (Container) Key.shortcuts();
		
			//  check to ensure there isn't a newbie ban on this
			//  site.
		if( !ic.getSite().newbiesAllowed() )
		{
			TextParagraph newbieban	 = (TextParagraph) online.getElement( "newbieban" );
			
			if( newbieban == null )
				ic.sendFeedback( "New players are not currently permitted to connect from this site" );
			else
				ic.send( newbieban, false );
			
			ic.close();
			return null;
		}
		
            //  check that the name is not in the reserved list
			//  (names that aren't permitted to log in)
		StringSet ss = (StringSet) online.getElement( "reservedNames" );
		if( ss != null && ss.get( name ) != null )
		{
			ic.sendText( "'" + name + "' means something else here, please choose another." );
			ic.blankLine();
			ic.blankLine();
			
			return( null );
		}
		
			//  need to create a new player & link it in
		ic.sendText( "  '" + name + "' not found in player database...\n" );
		
		if( guestConfirmName( ic, name ) )
		{
			try
			{
				if( created != null )
					created.endConnect();
				
				created = new Player();
				created.setKey( name );
				created.beginConnect();
				players.add( created );
				
				Rank nr = Key.instance().getInitialRank();
				if( nr != null )
					nr.add( created );
				
				Atom a = shortcuts.getExactElement( name );
				if( a != null )
				{
					TextParagraph disclaimer = (TextParagraph) connectConfig.getProperty( "disclaimer" );
					
					if( disclaimer != null && disclaimer.getText().length() != 0 )
					{
						ic.send( disclaimer, false );

						if( !Grammar.getYesNo( "Do you accept these conditions? ", true, ic ) )
						{
							ic.close();
							
							if( created != null )
								players.remove( created );
							
							p.endConnect();
							p = null;
							stop();
						}
					}
					
					TextParagraph gender = (TextParagraph) connectConfig.getProperty( "genderRequest" );
					if( gender != null && gender.getText().length() != 0 )
					{
						ic.sendBlankLine();
						ic.send( gender, false );
						ic.sendBlankLine();
						
						boolean genderOk;
						
						do
						{
							genderOk = true;
							
							String in = ic.input( "Enter 'm' or 'f': " );
							if( in.equalsIgnoreCase( "m" ) )
								p.setGender( Gender.MALE_GENDER );
							else if( in.equalsIgnoreCase( "f" ) )
								p.setGender( Gender.FEMALE_GENDER );
							else
							{
								genderOk = false;
								
								if( in.startsWith( "\'" ) )
									ic.sendText( "\nDo not type the quotes, just the letter m or f.\n" );
								else
									ic.sendText( "\nPlease enter, literally: 'm' if you are male, or 'f' if you are female.\n" );
							}
						} while( !genderOk );
					}
					
					TextParagraph newbieScreen = (TextParagraph) connectConfig.getProperty( "newbieA" );
					if( newbieScreen != null && newbieScreen.getText().length() != 0 )
					{
						ic.send( newbieScreen, false );
						Grammar.getReturn( ic );
					}
					
					newbieScreen = (TextParagraph) connectConfig.getProperty( "newbieB" );
					if( newbieScreen != null && newbieScreen.getText().length() != 0 )
					{
						ic.send( newbieScreen, false );
						Grammar.getReturn( ic );
					}
					
					return( created );
				}
				else
					ic.send( "Cannot create a player with this name" );
			}
			catch( BadKeyException e )
			{
				ic.send( "Your name must only contain alphabetical characters" );
			}
			catch( NonUniqueKeyException e )
			{
				ic.send( "There is already another player using this name" );
			}
		}
		else
		{
			ic.sendBlankLine();
			ic.sendBlankLine();
			ic.send( "  Perhaps someone else, then..." );
			ic.sendBlankLine();
		}
		
		return( null );
	}
	
	public Player connectResident( InteractiveConnection ic, Player p )
	{
		p.beginConnect();
						
		//  now check if the player has been banished
		if( p.isBanished() )
		{
			TextParagraph banished = (TextParagraph) online.getElement( "playerBanished" );
			if ( banished == null )
			{
				ic.sendFeedback( "Your character is currently banished." );
				ic.sendFeedback( "Please mail forest@realm.progsoc.uts.edu.au for details" );
			}
			else
				ic.send( banished, false );

			p.endConnect();
			p = null;
			ic.close();
			return;
		}
						
		int tries = 0;
		
		try
		{
			do
			{
				if( p.authenticate( ic ) )
				{
					name_okay = true;
				}
				else
				{
					name_okay = false;
				}
			} while( !name_okay && ++tries < 3 );
		}
		catch( PlayerDoesntWantThisNameException except )
		{
			ic.send( "  Perhaps someone else, then..." );
			name_okay = false;
			p.endConnect();
			p = null;
			continue;
		}
		
		if( !name_okay )
		{
			ic.close();
			
			p.endConnect();
			p = null;
			a = null;
			
			stop();
		}
	}
	
	public void connectToProgram( InteractiveConnection ic, Player p )
	{
			//  copyright messages
		ic.send( Key.copyright );
		ic.sendLine();
		
			//  the MOTD
		TextParagraph motd = (TextParagraph) online.getElement( "motd" );
		
		if( motd != null )
		{
			ic.send( motd, false );
			Grammar.getReturn( ic );
		}
		
			// link this player into the program
		try
		{
			if( p.connected() )
			{
				p.getConnection().sendSystem( "Reconnecting..." );
				p.disconnect();
				yield();  //  wait for them to disconnect
			}
			p.connectTo( ic );
		}
		catch( NonUniqueKeyException e )
		{
			ic.send( "This player is already on the program.  You will need to enter another name." );
			name_okay = false;
		}
		catch( BadKeyException e )
		{
			ic.send( "Your name must consist of alphabetical characters only.  Please try again." );
			name_okay = false;
		}
		finally
		{
			p.endConnect();
		}
		else
		{
			ic.send( "That word means something else here.  Please choose another name" );
			name_okay = false;
		}
	}
	
	/**
	  *  Retrieves a player structure from the entered name.  Should
	  *  the name not be acceptable for some reason, null is returned.
	  *  Should a serious error occur, the connection will be closed,
	  *  also.
	  *
	  * @return null on failure
	 */
	protected Player getPlayerFromName( InteractiveConnection ic, String name )
	{
		Object a = Key.shortcuts().getExactElement( name );
		
		if( a == null )
			return( getGuest( ic, name ) );
		else
		{
			if( matched instanceof Player )
			{
				Player p = (Player) a;
				
				if( p.willSync() )
				{
					connectResident( ic, p );
				}
				else
					ic.send( "That name is in use by another new player at the moment, and can't be used." );
			}
			else
				ic.send( "That name means something else here." );
		}
		
		return( null );
	}
	
	public void connect()
	{
		Key key = Key.instance();
		Container players = (Container) key.getResidents();
		Container shortcuts = (Container) Key.shortcuts();
		ConnectionConfiguration connectConfig = (ConnectionConfiguration) key.getConfig().getElement( "connection" );
		
		try
		{
			String name;
			
			ic.check();  //  see if there are any terminal options
			             //  responded to already (so we can format
						 //  our pretty logo)
			name = getPlayersName( ic );
			
			ic.blankLine();
			ic.blankLine();
			
			Player p = getPlayerFromName( ic, name );

			if( p == null )
			{
				//  some error has occurred
				if( !ic.isAlive() )
					return;
			}

				//  kick off the player (they'll look at the motd
				//  & link themselves in when they're ready)
			p.start();
		}
		catch( java.io.IOException e )
		{
			Key.debug( this, "disconnect from login" );
			ic.close();
			if( created != null )
			{
				created.endConnect();
				try
				{
					players.remove( created );
				}
				catch( NonUniqueKeyException ex )
				{
				}
				catch( BadKeyException ex )
				{
				}
			}
			if( p != null )
				p.endConnect();
			stop();
		}
		catch( Exception e )
		{
			Key.debug( this, e.toString() + " at login prompt" );
			e.printStackTrace( System.out );
			ic.send( "\n\nWe apologise, but an error has occurred attempting to connect you.  Please mail forest@realm.progsoc.uts.edu.au if you are continually having problems.  Detail: " + e.toString() );
			ic.close();
			if( created != null )
			{
				created.endConnect();
				try
				{
					players.remove( created );
				}
				catch( NonUniqueKeyException ex )
				{
				}
				catch( BadKeyException ex )
				{
				}
			}
			if( p != null )
				p.endConnect();
			stop();
		}
		
		//Key.debug( this, "starting new player..." );
		p.start();
		//Key.debug( this, "stopping connecter..." );
		stop();
	}
	
	/**
	  *  Puts the initial logo on the players screen.
	 */
	protected void outputLogo()
	{
		Paragraph logo = (Paragraph) Key.instance().getOnline().getElement( "logo" );
		
		if( logo != null )
			ic.send( logo, false );
	}
	
	/**
	  *  This function returns the player's name, as entered at
	  *  the 'Please enter your name:' prompt.
	 */
	protected String getPlayersName( InteractiveConnection ic )
	{
		boolean name_okay;
		String name;
		
		do
		{
			name_okay = false;
			
			name = ic.input( "Please enter your name: " );
			
			if( name.length() < Player.MIN_NAME )
			{
				ic.sendText( "We require that your name is at least " + Player.MIN_NAME + " characters long.  You'll need to choose another." );
				continue;
			}
			else if( name.length() > Player.MAX_NAME )
			{
				ic.sendText( "We require that your name is less than " + Player.MAX_NAME + " characters long.  You'll need to choose another." );
				continue;
			}
			
			if( !Grammar.isStringCompletelyAlphabetical( name ) )
			{
				ic.send( "Your name must only contain alphabetical characters" );
				continue;
			}
			
			if( name.equalsIgnoreCase( "quit" ) )
			{
				ic.close();
				return;
			}
		} while( !name_okay );

		return( name );
	}
	
	/**
	  *  This function outputs the 'are you sure you want to use this
	  *  name' prompt, when someone starts to create a new player.
	  *
	  * @param ic the connection
	  * @param name the name the player originally typed
	  * @return true if the person replied 'yes'
	 */
	protected boolean guestConfirmName( InteractiveConnection ic, String name )
	{
		ConnectionConfiguration connectConfig = (ConnectionConfiguration) Key.getConfig().getElement( "connection" );
		
		ic.send( (Paragraph) connectConfig.getProperty( "newbieConfirmName" ) );
		ic.sendBlankLine();
		
			//  output the multiple matches screen
		Object o;
		o = Key.getResidents().getTrieFor( name.substring( 0, 3 ) );
		
		if( (o != null) )
		{
			if( o instanceof Trie )
				ic.send( new TextParagraph( TextParagraph.CENTERALIGNED, ((Trie)o).contents(), 10, 10, 0, 0 ), false );
			else if( o instanceof Tag )
				ic.send( new TextParagraph( TextParagraph.CENTERALIGNED, ((Tag)o).getName(), 10, 10, 0, 0 ), false );
		}
		else
			ic.send( new TextParagraph( TextParagraph.CENTERALIGNED, "<no close names found>", 10, 10, 0, 0 ), false );
		
		ic.sendBlankLine();
		
		return( Grammar.getYesNo( "Do you still wish to create a new character of the name '" + name + "'? ", false, ic ) );
	}
	
	public InteractiveConnection getInteractiveConnection()
	{
		return( ic );
	}
	
	private boolean mod = false;
	
	public boolean modified()
	{
		return( mod );
	}

	public void resetModify()
	{
		mod = false;
	}
	
	public synchronized void deallocate()
	{
		ic.send( "\n\nYou have taken too long to connect." );
		ic.close();
		stop();
	}
	
	public void writeTo( DataOutput to ) throws IOException
	{
		to.writeInt( 0 );  //  the revision
	}

	public void loadFrom( DataInput from ) throws IOException
	{
		int revision;

		revision = from.readInt();
		switch( revision )
		{
			case 0:
				break;
		}
	}
}
